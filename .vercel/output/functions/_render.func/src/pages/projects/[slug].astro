---
import { Image } from "astro:assets";
import { WebProjects } from "../../data/web_projects";
import { DataProjects } from "../../data/data_projects";
import Layout from "../../layouts/Layout.astro";
import "../../styles/style.scss";

const joinedProjects = [...WebProjects, ...DataProjects];
const { slug } = Astro.params;
const projectData = joinedProjects.find((project) => project.slug === slug);

if (!projectData) {
	return Astro.redirect("/404");
}

// Importar imágenes dinámicamente usando glob pattern (Astro v5 recomienda import.meta.glob)
const images = import.meta.glob(
	"/src/assets/projects/**/*.{jpeg,jpg,png,gif,webp,svg}",
	{ eager: true }
);

// Función para obtener la imagen importada
function getImageModule(imagePath: string) {
	if (!imagePath) return null;

	// Construir la ruta completa para el pattern glob
	const fullPath = `/src/assets/projects/${imagePath}`;
	const imageModule = images[fullPath];

	if (!imageModule) {
		console.warn(`Image not found: ${fullPath}`);
		return null;
	}

	return imageModule.default;
}

// Obtener las imágenes del proyecto
const image1 = getImageModule(projectData.image_1);
const image2 = projectData.image_2 ? getImageModule(projectData.image_2) : null;

// Verificar que la imagen principal existe
if (!image1) {
	console.error(`Main image not found for project: ${projectData.slug}`);
}
---

<Layout title="Projects">
	<div
		class="project"
		data-background-color={projectData.backgroundColor}
		data-navbar-color={projectData.navbarColor}
	>
		<div class="project__content">
			<div class="project__content--item project__content--title">
				<h2>{projectData.name}</h2>
				<p>{projectData.description}</p>
			</div>
			<div class="project__content--item project__content--description">
				<div class="project__content--buttons">
					<a href={projectData.github}>Github</a>
					{projectData.deploy && <a href={projectData.deploy}>Deployment</a>}
				</div>
				<p>{projectData.overview}</p>
			</div>
		</div>

		{
			image1 && (
				<figure class="project__firstimage">
					<Image
						src={image1}
						alt={projectData.alt_1}
						width={1200}
						height={800}
						format="webp"
						quality={85}
						loading="eager"
					/>
					<figcaption>{projectData.alt_1}</figcaption>
				</figure>
			)
		}

		<section class="project__features">
			{
				projectData.features.map((feature) => (
					<article class="project__features--card">
						<header>
							<h3>{feature.title}</h3>
						</header>
						<div>
							<p>{feature.description}</p>
						</div>
					</article>
				))
			}
		</section>

		{
			image2 && (
				<figure class="project__secondimage">
					<Image
						src={image2}
						alt={projectData.alt_2}
						width={1200}
						height={800}
						format="webp"
						quality={85}
						loading="lazy"
					/>
					<figcaption>{projectData.alt_2}</figcaption>
				</figure>
			)
		}

		<div class="project__conclusion">
			<p>{projectData.conclusion}</p>
		</div>

		<div class="project__cta">
			<a href={projectData.github}>Contribute to project</a>
			<a href="/work" class="btn btn-secondary">Back to Projects</a>
		</div>

		<div class="project__footer">
			<p>&copy; 2025 by Alberte Vieites. All Rights Reserved.</p>
			<p>Special thanks to all contributors and collaborators.</p>
		</div>
	</div>
</Layout>

<script>
	function updateOnScroll() {
		const projectElement = document.querySelector(".project") as HTMLElement;
		if (!projectElement) return;

		const projectBackgroundColor = projectElement.dataset.backgroundColor || "";
		const projectNavbarColor = projectElement.dataset.navbarColor || "";

		const htmlElement = document.documentElement;
		const bodyElement = document.body;
		const navbarElement = document.querySelector(".navbar") as HTMLElement;
		const svgElements = document.querySelectorAll(".social svg");

		const scrollTop = document.documentElement.scrollTop;

		if (scrollTop > 50) {
			if (projectBackgroundColor) {
				htmlElement.style.backgroundColor = projectBackgroundColor;
				bodyElement.style.backgroundColor = projectBackgroundColor;
			}
			if (navbarElement && projectNavbarColor) {
				navbarElement.style.backgroundColor = projectNavbarColor;
			}
			svgElements.forEach((svg) => {
				const svgElement = svg as HTMLElement;
				if (projectBackgroundColor) {
					svgElement.style.fill = projectBackgroundColor;
				}
			});
		} else {
			htmlElement.style.backgroundColor = "";
			bodyElement.style.backgroundColor = "";
			if (navbarElement) {
				navbarElement.style.backgroundColor = "";
			}
			svgElements.forEach((svg) => {
				const svgElement = svg as HTMLElement;
				svgElement.style.fill = "";
			});
		}
	}

	// Escuchar el evento astro:page-load para ejecutar el script después de cada carga de página
	document.addEventListener("astro:page-load", () => {
		// Asegúrate de que el código se ejecute solo en el navegador
		if (typeof window !== "undefined") {
			// Actualiza el estilo al cargar la página
			updateOnScroll();

			// Añade el listener de evento de desplazamiento
			window.addEventListener("scroll", updateOnScroll);
		}
	});

	// Limpieza para remover el event listener cuando la página se descargue o se navegue fuera
	document.addEventListener("astro:before-swap", () => {
		window.removeEventListener("scroll", updateOnScroll);
	});
</script>
